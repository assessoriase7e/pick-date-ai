generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @map("_id")
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile      Profile?
  apiKey       ApiKey[]
  audios       AudioRecord[]
  images       ImageRecord[]
  documents    DocumentRecord[]
  links        Link[]
  prompts      Prompt[]
  ragFiles     RagFile[]
  redisKeys    RedisKey[]
  whatsapp     Whatsapp?
  services     Service[]
  calendars    Calendar[]
  appointments Appointment[]

  agentPrompts   AgentPrompt[]
  agentRagFiles  AgentRagFile[]
  agentRedisKeys AgentRedisKey[]
  agentWhatsapp  AgentWhatsapp[]

  attendantPrompts   AttendantPrompt[]
  sdrPrompts         SdrPrompt[]
  followUpPrompts    FollowUpPrompt[]
  evolutionInstances EvolutionInstance[]
  client             Client[]
  serviceHistory     ServiceHistory[]
  collaborator       Collaborator[]

  @@map("user")
}

model Profile {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  whatsapp       String?
  companyName    String?
  businessHours  Json?
  address        String?
  locationUrl    String?
  documentNumber String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@map("profile")
}

model AudioRecord {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  audioBase64 String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("audiorecord")
}

model ImageRecord {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  imageBase64 String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("imagerecord")
}

model DocumentRecord {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  documentBase64 String
  fileName       String
  fileType       String
  description    String
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("documentrecord")
}

model Link {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("link")
}

model ApiKey {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  key         String   @unique
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("apikey")
}

model Prompt {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  type                     String
  content                  String
  isActive                 Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  presentation             String?
  speechStyle              String?
  expressionInterpretation String?
  schedulingScript         String?
  rules                    String?
  formattedContent         String?
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AttendantPrompt {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  content                  String
  isActive                 Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  presentation             String
  speechStyle              String
  expressionInterpretation String
  schedulingScript         String
  rules                    String
  formattedContent         String
  userId                   String   @unique
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attendantprompt")
}

model SdrPrompt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sdrprompt")
}

model FollowUpPrompt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("followupprompt")
}

model RagFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model RagConfig {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique
  webhookUrl  String?
  metadataKey String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RedisKey {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rediskey")
}

model Whatsapp {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("whatsapp")
}

// Agent-related models
model AgentPrompt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  attendant Boolean  @default(false)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentRagFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentRedisKey {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentWhatsapp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EvolutionInstance {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  number     String
  qrCode     String
  webhookUrl String?
  apiKey     String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Service {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  price           Float
  availableDays   String[]
  notes           String?
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  serviceHistory  ServiceHistory[]
  clientService   ClientService[]
  appointment     Appointment[]
  collaborator    Collaborator?    @relation(fields: [collaboratorId], references: [id])
  collaboratorId  String?          @db.ObjectId
  durationMinutes Int?             @default(60)

  @@map("service")
}

model Client {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  fullName       String
  phone          String
  birthDate      DateTime
  notes          String?
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  serviceHistory ServiceHistory[]
  clientService  ClientService[]
  Appointment    Appointment[]

  @@map("client")
}

model ServiceHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId  String   @db.ObjectId
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  serviceId String   @db.ObjectId
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  date      DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("servicehistory")
}

model ClientService {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId  String   @db.ObjectId
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  serviceId String   @db.ObjectId
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clientservice")
}

model Calendar {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointments   Appointment[]
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  collaboratorId String?       @db.ObjectId

  @@map("calendar")
}

model Collaborator {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  phone        String
  profession   String
  description  String?
  workingHours String
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  services     Service[]
  serviceIds   String[]   @db.ObjectId
  calendars    Calendar[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("collaborator")
}

model Appointment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId   String   @db.ObjectId
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  serviceId  String   @db.ObjectId
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  calendarId String   @db.ObjectId
  calendar   Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  startTime  DateTime
  endTime    DateTime
  notes      String?
  status     String   @default("scheduled") // scheduled, completed, cancelled
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@map("appointment")
}
