generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model professional {
  id        String        @id @default(cuid())
  name      String
  phone     String
  company   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  audios    audioRecord[]
  images    imageRecord[]
}

model audioRecord {
  id             String       @id @default(cuid())
  audioBase64    String       @db.Text
  description    String       @db.Text
  professional   professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model imageRecord {
  id             String       @id @default(cuid())
  imageBase64    String       @db.Text
  description    String       @db.Text
  professional   professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model user {
  id        String   @id
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ApiKey apiKey[]
}

model appointments {
  id            BigInt   @id @default(autoincrement())
  phone         Decimal? @db.Decimal
  business_name String?
  start_time    String?
  end_time      String?
  event_id      String?
  created_at    DateTime @default(now()) @db.Timestamptz(6)
}

model clients {
  id            BigInt   @id @default(autoincrement())
  full_name     String?
  phone         String?
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  business_name String?
}

model documents {
  id        BigInt                 @id @default(autoincrement())
  content   String?
  metadata  Json?
  embedding Unsupported("vector")?
}

model apiKey {
  id          String   @id @default(cuid())
  key         String   @unique
  description String?
  userId      String
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}
