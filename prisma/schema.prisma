generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @map("_id")
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile?
  ApiKey    ApiKey[]
  audios    AudioRecord[]
  images    ImageRecord[]
  documents DocumentRecord[]
  links     Link[]
  prompts   Prompt[]
  ragFiles  RagFile[]
  redisKeys RedisKey[]
  whatsapp  Whatsapp?

  // Agent-related relations
  agentPrompts   AgentPrompt[]
  agentRagFiles  AgentRagFile[]
  agentRedisKeys AgentRedisKey[]
  agentWhatsapp  AgentWhatsapp[]

  @@map("user")
}

model Profile {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  phone          String?
  companyName    String?
  businessHours  Json?
  address        String?
  locationUrl    String?
  documentNumber String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@map("profile")
}

model AudioRecord {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  audioBase64 String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("audiorecord")
}

model ImageRecord {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  imageBase64 String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("imagerecord")
}

model DocumentRecord {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  documentBase64 String
  fileName       String
  fileType       String
  description    String
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("documentrecord")
}

model Link {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("link")
}

model ApiKey {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  key         String   @unique
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("apikey")
}

model Evolution {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  webhookUrl String
  instanceId String
  status     String
}

model Prompt {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  type                     String
  content                  String
  isActive                 Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  presentation             String?
  speechStyle              String?
  expressionInterpretation String?
  schedulingScript         String?
  rules                    String?
  formattedContent         String?
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RagFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadataKey String? // <-- Adicionado campo opcional para chave metadata
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model WebhookConfig {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RedisKey {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rediskey")
}

model Whatsapp {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("whatsapp")
}

// Agent-related models
model AgentPrompt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  attendant Boolean  @default(false)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AgentRagFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AgentRedisKey {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AgentWhatsapp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
