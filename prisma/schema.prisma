generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id
  email              String              @unique
  firstName          String?
  lastName           String?
  imageUrl           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  apiKey             ApiKey[]
  appointments       Appointment[]
  calendars          Calendar[]
  client             Client[]
  collaborator       Collaborator[]
  evolutionInstances EvolutionInstance[]
  files              FileRecord[]
  links              Link[]
  profile            Profile?
  services           Service[]
  subscription       Subscription?
  paymentHistory     PaymentHistory[]
  additionalCalendars AdditionalCalendar[]
  combos             Combo[]

  @@map("user")
}

model Profile {
  id             Int     @id @default(autoincrement())
  whatsapp       String?
  companyName    String?
  businessHours  Json?
  address        String?
  locationUrl    String?
  documentNumber String?
  timezone       String?
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Link {
  id          Int      @id @default(autoincrement())
  url         String
  title       String
  description String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("link")
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("apikey")
}

// Modelo para os pacotes/combos
model Combo {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  discountType    String           // "percentage" ou "fixed"
  discountValue   Float            @default(0)
  totalPrice      Float            // Preço total sem desconto
  finalPrice      Float            // Preço final com desconto
  isActive        Boolean          @default(true)
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  comboServices   ComboService[]
  clientCombos    ClientCombo[]

  @@map("combo")
}

// Serviços inclusos no pacote
model ComboService {
  id           Int      @id @default(autoincrement())
  comboId      Int
  serviceId    Int?
  serviceName  String   // Nome do serviço para histórico
  servicePrice Float    // Preço do serviço para cálculos
  quantity     Int      // Quantidade de sessões incluídas
  createdAt    DateTime @default(now())
  combo        Combo    @relation(fields: [comboId], references: [id], onDelete: Cascade)
  service      Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@map("comboService")
}

// Pacotes atribuídos aos clientes
model ClientCombo {
  id           Int                    @id @default(autoincrement())
  clientId     Int
  comboId      Int?
  comboName    String                 // Nome do combo para histórico
  purchaseDate DateTime               @default(now())
  expiresAt    DateTime?
  amountPaid   Float?                 // Para suporte futuro a parcelamento
  status       String                 @default("active") // "active", "completed", "expired"
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  client       Client                 @relation(fields: [clientId], references: [id], onDelete: Cascade)
  combo        Combo?                 @relation(fields: [comboId], references: [id], onDelete: SetNull)
  sessions     ClientComboSession[]
  appointments Appointment[]

  @@map("clientCombo")
}

// Controle de sessões por serviço no pacote do cliente
model ClientComboSession {
  id              Int         @id @default(autoincrement())
  clientComboId   Int
  serviceId       Int?
  serviceName     String      // Nome do serviço para histórico
  totalSessions   Int         // Total de sessões incluídas
  usedSessions    Int         @default(0) // Sessões já utilizadas
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  clientCombo     ClientCombo @relation(fields: [clientComboId], references: [id], onDelete: Cascade)
  service         Service?    @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@map("clientComboSession")
}

model Service {
  id                   Int                   @id @default(autoincrement())
  name                 String
  price                Float
  availableDays        String[]
  notes                String?
  userId               String
  durationMinutes      Int                   @default(30)
  commission           Float?                @default(0)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  appointments         Appointment[]
  clientServices       ClientService[]
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceCollaborators ServiceCollaborator[]
  comboServices        ComboService[]
  clientComboSessions  ClientComboSession[]

  @@map("service")
}

model ServiceCollaborator {
  id             Int          @id @default(autoincrement())
  serviceId      Int
  collaboratorId Int
  createdAt      DateTime     @default(now())
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, collaboratorId])
  @@map("serviceCollaborator")
}

model Client {
  id             Int             @id @default(autoincrement())
  fullName       String
  phone          String
  birthDate      DateTime?
  notes          String?
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  appointments   Appointment[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientServices ClientService[]
  clientCombos   ClientCombo[]

  @@map("client")
}

model ClientService {
  id        Int      @id @default(autoincrement())
  clientId  Int
  serviceId Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("clientservice")
}

model Calendar {
  id             Int           @id @default(autoincrement())
  name           String?
  collaboratorId Int?
  userId         String
  isActive       Boolean       @default(true)
  accessCode     String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointments   Appointment[]
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id], onDelete: SetNull)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendar")
}

model Collaborator {
  id                   Int                   @id @default(autoincrement())
  name                 String
  phone                String
  profession           String
  description          String?
  userId               String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  appointments         Appointment[]
  calendars            Calendar[]
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceCollaborators ServiceCollaborator[]
  workHours            WorkHour[]

  @@map("collaborator")
}

model WorkHour {
  id             Int          @id @default(autoincrement())
  day            String
  startTime      String
  endTime        String
  breakStart     String?
  breakEnd       String?
  collaboratorId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)

  @@map("workhour")
}

model Appointment {
  id               Int           @id @default(autoincrement())
  startTime        DateTime
  endTime          DateTime
  status           String        @default("scheduled")
  notes            String?
  servicePrice     Float?
  finalPrice       Float?
  serviceName      String?       // Nome do serviço no momento do agendamento
  collaboratorName String?       // Nome do colaborador no momento do agendamento
  comboName        String?       // Nome do combo no momento do agendamento
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  userId           String
  clientId         Int?
  serviceId        Int
  calendarId       Int
  collaboratorId   Int?
  comboId          Int?
  calendar         Calendar      @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  client           Client?       @relation(fields: [clientId], references: [id], onDelete: SetNull)
  collaborator     Collaborator? @relation(fields: [collaboratorId], references: [id], onDelete: SetNull)
  service          Service       @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientCombo      ClientCombo?  @relation(fields: [comboId], references: [id], onDelete: SetNull)

  @@map("appointment")
}

model FileRecord {
  id          Int      @id @default(autoincrement())
  fileUrl     String
  fileName    String
  fileType    String
  description String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("filerecord")
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String   @unique
  stripeCustomerId      String   @unique
  stripeSubscriptionId  String   @unique
  stripePriceId         String
  stripeProductId       String
  planName              String
  planType              String   // "basic"
  status                String   // active, canceled, incomplete, past_due, etc.
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean  @default(false)
  trialStart            DateTime?
  trialEnd              DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription")
}

model PaymentHistory {
  id                   String   @id @default(cuid())
  userId               String
  stripePaymentId      String   @unique
  stripeInvoiceId      String?
  amount               Int      // em centavos
  currency             String   @default("brl")
  status               String   // succeeded, failed, pending
  description          String?
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("paymenthistory")
}

model AdditionalCalendar {
  id                   Int       @id @default(autoincrement())
  userId               String
  active               Boolean   @default(true)
  purchaseDate         DateTime  @default(now())
  currentPeriodEnd     DateTime
  expiresAt            DateTime
  stripeSubscriptionId String?
  stripeInvoiceId      String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("additionalCalendar")
}

model EvolutionInstance {
  id         Int      @id @default(autoincrement())
  name       String
  number     String
  qrCode     String?
  webhookUrl String?
  apiKey     String?
  status     String   @default("close")
  type       String   @default("attendant")
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("evolutioninstance")
}