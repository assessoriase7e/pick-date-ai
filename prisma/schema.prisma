generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id
  email              String              @unique
  firstName          String?
  lastName           String?
  imageUrl           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  agentPrompts       AgentPrompt[]
  agentRagFiles      AgentRagFile[]
  agentRedisKeys     AgentRedisKey[]
  agentWhatsapp      AgentWhatsapp[]
  prompts            Prompt[]
  ragFiles           RagFile[]
  apiKey             ApiKey[]
  appointments       Appointment[]
  attendantPrompts   AttendantPrompt?
  blackList          BlackList?
  calendars          Calendar[]
  client             Client[]
  collaborator       Collaborator[]
  evolutionInstances EvolutionInstance[]
  files              FileRecord[]
  followUpPrompts    FollowUpPrompt?
  links              Link[]
  profile            Profile?
  redisKeys          RedisKey[]
  sdrPrompts         SdrPrompt?
  services           Service[]
  whatsapp           Whatsapp?
  aiUsages           AIUsage[]           
  questionTexts      QuestionText[]
  subscription       Subscription?
  paymentHistory     PaymentHistory[]
  additionalAICredits AdditionalAICredit[]

  @@map("user")
}

model Profile {
  id             Int     @id @default(autoincrement())
  whatsapp       String?
  companyName    String?
  businessHours  Json?
  address        String?
  locationUrl    String?
  documentNumber String?
  timezone       String?
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Link {
  id          Int      @id @default(autoincrement())
  url         String
  title       String
  description String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("link")
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("apikey")
}

model Prompt {
  id                       Int      @id @default(autoincrement())
  type                     String
  content                  String
  isActive                 Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  presentation             String?
  speechStyle              String?
  expressionInterpretation String?
  schedulingScript         String?
  rules                    String?
  formattedContent         String?
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AttendantPrompt {
  id                       Int      @id @default(autoincrement())
  content                  String
  isActive                 Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  presentation             String
  speechStyle              String
  expressionInterpretation String
  schedulingScript         String
  rules                    String
  formattedContent         String
  suportPhone              String?
  userId                   String   @unique
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attendantprompt")
}

model SdrPrompt {
  id        Int      @id @default(autoincrement())
  content   String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sdrprompt")
}

model FollowUpPrompt {
  id        Int      @id @default(autoincrement())
  content   String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("followupprompt")
}

model RagFile {
  id        Int      @id @default(autoincrement())
  name      String
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model RagConfig {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  webhookUrl  String?
  metadataKey String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RedisKey {
  id        Int      @id @default(autoincrement())
  key       String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rediskey")
}

model Whatsapp {
  id          Int      @id @default(autoincrement())
  phoneNumber String
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("whatsapp")
}

model AgentPrompt {
  id        Int      @id @default(autoincrement())
  userId    String
  attendant Boolean  @default(false)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentRagFile {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentRedisKey {
  id        Int      @id @default(autoincrement())
  userId    String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentWhatsapp {
  id        Int      @id @default(autoincrement())
  userId    String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EvolutionInstance {
  id         Int      @id @default(autoincrement())
  name       String
  number     String
  qrCode     String?
  webhookUrl String?
  apiKey     String?
  status     String   @default("close")
  type       String   @default("attendant")
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("evolutioninstance")
}

model Service {
  id                   Int                   @id @default(autoincrement())
  name                 String
  price                Float
  availableDays        String[]
  notes                String?
  userId               String
  durationMinutes      Int                   @default(30)
  commission           Float?                @default(0)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  appointments         Appointment[]
  clientServices       ClientService[]
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceCollaborators ServiceCollaborator[]

  @@map("service")
}

model ServiceCollaborator {
  id             Int          @id @default(autoincrement())
  serviceId      Int
  collaboratorId Int
  createdAt      DateTime     @default(now())
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, collaboratorId])
  @@map("serviceCollaborator")
}

model Client {
  id             Int             @id @default(autoincrement())
  fullName       String
  phone          String
  birthDate      DateTime?
  notes          String?
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  appointments   Appointment[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientServices ClientService[]

  @@map("client")
}

model ClientService {
  id        Int      @id @default(autoincrement())
  clientId  Int
  serviceId Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("clientservice")
}

model Calendar {
  id             Int           @id @default(autoincrement())
  name           String?
  collaboratorId Int?
  userId         String
  isActive       Boolean       @default(true)
  accessCode     String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointments   Appointment[]
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendar")
}

model Collaborator {
  id                   Int                   @id @default(autoincrement())
  name                 String
  phone                String
  profession           String
  description          String?
  userId               String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  appointments         Appointment[]
  calendars            Calendar[]
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceCollaborators ServiceCollaborator[]
  workHours            WorkHour[]

  @@map("collaborator")
}

model WorkHour {
  id             Int          @id @default(autoincrement())
  day            String
  startTime      String
  endTime        String
  breakStart     String?
  breakEnd       String?
  collaboratorId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)

  @@map("workhour")
}

model Appointment {
  id             Int           @id @default(autoincrement())
  startTime      DateTime
  endTime        DateTime
  status         String        @default("scheduled")
  notes          String?
  servicePrice   Float?
  finalPrice     Float?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  clientId       Int?
  serviceId      Int
  calendarId     Int
  collaboratorId Int?
  calendar       Calendar      @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  client         Client?       @relation(fields: [clientId], references: [id])
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  service        Service       @relation(fields: [serviceId], references: [id])
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appointment")
}

model FileRecord {
  id          Int      @id @default(autoincrement())
  fileUrl     String
  fileName    String
  fileType    String
  description String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("filerecord")
}

model BlackList {
  id        Int              @id @default(autoincrement())
  userId    String           @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  phones    BlackListPhone[]

  @@map("blacklist")
}

model BlackListPhone {
  id          Int       @id @default(autoincrement())
  number      String
  name        String?
  blackListId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  blackList   BlackList @relation(fields: [blackListId], references: [id], onDelete: Cascade)

  @@map("blacklistphone")
}

model AIUsage {
  id                Int      @id @default(autoincrement())
  userId            String
  date              DateTime @default(now())
  clientPhone       String
  conversationId    String   @unique
  serviceType       String   // Tipo de serviço (atendimento, agendamento, etc)
  status            String   // Concluído, abandonado, etc
  tokensUsed        Int?     // Opcional: para rastrear uso de tokens se necessário
  responseTime      Int?     // Opcional: tempo de resposta em ms
  source            String   // whatsapp, n8n, etc
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date]) // Índice para consultas por usuário e data
  @@index([clientPhone])  // Índice para consultas por telefone do cliente
  @@map("aiusage")
}

model QuestionText {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  content     String   @db.Text
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("questiontext")
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String   @unique
  stripeCustomerId      String   @unique
  stripeSubscriptionId  String   @unique
  stripePriceId         String
  stripeProductId       String
  status                String   // active, canceled, incomplete, past_due, etc.
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean  @default(false)
  trialStart            DateTime?
  trialEnd              DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription")
}

model PaymentHistory {
  id                   String   @id @default(cuid())
  userId               String
  stripePaymentId      String   @unique
  stripeInvoiceId      String?
  amount               Int      // em centavos
  currency             String   @default("brl")
  status               String   // succeeded, failed, pending
  description          String?
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("paymenthistory")
}

model AdditionalAICredit {
  id                Int       @id @default(autoincrement())
  userId            String
  quantity          Int      @default(10) // Quantidade de créditos (padrão: 10)
  used              Int      @default(0)  // Quantidade já utilizada
  active            Boolean  @default(true)
  purchaseDate      DateTime @default(now())
  stripePaymentId   String?
  stripeInvoiceId   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("additionalAICredit")
}