generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @map("_id")
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ApiKey    ApiKey[]
  audios    AudioRecord[]
  images    ImageRecord[]
  documents DocumentRecord[]
  links     Link[]

  @@map("user")
}

model AudioRecord {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  audioBase64 String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("audiorecord")
}

model ImageRecord {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  imageBase64 String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("imagerecord")
}

model DocumentRecord {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  documentBase64 String
  fileName       String
  fileType       String
  description    String
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("documentrecord")
}

model Link {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  url            String
  title          String
  description    String
  professionalId String?  @db.ObjectId
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("link")
}

model ApiKey {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  key         String   @unique
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("apikey")
}
