generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id // Mantendo o ID do Clerk como prim√°rio
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile?
  apiKey  ApiKey[]

  files        FileRecord[]
  links        Link[]
  prompts      Prompt[]
  ragFiles     RagFile[]
  redisKeys    RedisKey[]
  whatsapp     Whatsapp?
  services     Service[]
  calendars    Calendar[]
  appointments Appointment[]

  agentPrompts   AgentPrompt[]
  agentRagFiles  AgentRagFile[]
  agentRedisKeys AgentRedisKey[]
  agentWhatsapp  AgentWhatsapp[]

  attendantPrompts   AttendantPrompt[]
  sdrPrompts         SdrPrompt[]
  followUpPrompts    FollowUpPrompt[]
  evolutionInstances EvolutionInstance[]
  client             Client[]
  collaborator       Collaborator[]
  blackList          BlackList?

  @@map("user")
}

model Profile {
  id             Int     @id @default(autoincrement())
  whatsapp       String?
  companyName    String?
  businessHours  Json?
  address        String?
  locationUrl    String?
  documentNumber String?
  timezone       String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@map("profile")
}

model Link {
  id          Int      @id @default(autoincrement())
  url         String
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("link")
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("apikey")
}

model Prompt {
  id                       Int      @id @default(autoincrement())
  type                     String
  content                  String
  isActive                 Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  presentation             String?
  speechStyle              String?
  expressionInterpretation String?
  schedulingScript         String?
  rules                    String?
  formattedContent         String?
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AttendantPrompt {
  id                       Int      @id @default(autoincrement())
  content                  String
  isActive                 Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  presentation             String
  speechStyle              String
  expressionInterpretation String
  schedulingScript         String
  rules                    String
  formattedContent         String
  suportPhone              String?
  userId                   String   @unique
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attendantprompt")
}

model SdrPrompt {
  id        Int      @id @default(autoincrement())
  content   String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sdrprompt")
}

model FollowUpPrompt {
  id        Int      @id @default(autoincrement())
  content   String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("followupprompt")
}

model RagFile {
  id        Int      @id @default(autoincrement())
  name      String
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model RagConfig {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  webhookUrl  String?
  metadataKey String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RedisKey {
  id        Int      @id @default(autoincrement())
  key       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rediskey")
}

model Whatsapp {
  id          Int      @id @default(autoincrement())
  phoneNumber String
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("whatsapp")
}

// Agent-related models
model AgentPrompt {
  id        Int      @id @default(autoincrement())
  userId    String
  attendant Boolean  @default(false)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentRagFile {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentRedisKey {
  id        Int      @id @default(autoincrement())
  userId    String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentWhatsapp {
  id        Int      @id @default(autoincrement())
  userId    String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EvolutionInstance {
  id         Int      @id @default(autoincrement())
  name       String
  number     String
  qrCode     String?
  webhookUrl String?
  apiKey     String?
  status     String   @default("close")
  type       String   @default("attendant")
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("evolutioninstance")
}

model Service {
  id                   Int                   @id @default(autoincrement())
  name                 String
  price                Float
  availableDays        String[]
  notes                String?
  serviceCollaborators ServiceCollaborator[]
  userId               String
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  durationMinutes      Int                   @default(30)
  commission           Float?                @default(0)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  clientServices       ClientService[]
  appointments         Appointment[]

  @@map("service")
}

model ServiceCollaborator {
  id             Int          @id @default(autoincrement())
  serviceId      Int
  collaboratorId Int
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([serviceId, collaboratorId])
  @@map("serviceCollaborator")
}

model Client {
  id        Int       @id @default(autoincrement())
  fullName  String
  phone     String
  birthDate DateTime?
  notes     String?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  clientServices ClientService[]
  appointments   Appointment[]

  @@map("client")
}

model ClientService {
  id        Int      @id @default(autoincrement())
  clientId  Int
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  serviceId Int
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clientservice")
}

model Calendar {
  id             Int           @id @default(autoincrement())
  name           String?
  collaboratorId Int?
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive       Boolean       @default(true)
  accessCode     String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointments   Appointment[]

  @@map("calendar")
}

model Collaborator {
  id                  Int                   @id @default(autoincrement())
  name                String
  phone               String
  profession          String
  description         String?
  workingHours        Json
  userId              String
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendars           Calendar[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  serviceCollaborators ServiceCollaborator[]
  appointments         Appointment[]

  @@map("collaborator")
}

model Appointment {
  id             Int          @id @default(autoincrement())
  startTime      DateTime
  endTime        DateTime
  status         String      @default("scheduled")
  notes          String?
  servicePrice   Float?
  finalPrice     Float?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId       Int?
  client         Client?      @relation(fields: [clientId], references: [id], onDelete: SetNull)
  serviceId      Int
  service        Service      @relation(fields: [serviceId], references: [id])
  calendarId     Int
  calendar       Calendar     @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  collaboratorId Int?
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])

  @@map("appointment")
}

model FileRecord {
  id          Int      @id @default(autoincrement())
  fileUrl     String
  fileName    String
  fileType    String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("filerecord")
}

model BlackList {
  id        Int              @id @default(autoincrement())
  userId    String           @unique
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  phones    BlackListPhone[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("blacklist")
}

model BlackListPhone {
  id          Int       @id @default(autoincrement())
  number      String
  name        String?
  blackListId Int
  blackList   BlackList @relation(fields: [blackListId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("blacklistphone")
}